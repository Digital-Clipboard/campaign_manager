// Campaign Manager Database Schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Campaign {
  id             String   @id @default(uuid())
  name           String
  type           String // email_blast, product_launch, webinar, newsletter, custom
  status         String   @default("planning") // planning, ready_for_review, needs_revision, approved, launched, completed, paused, cancelled
  targetDate     DateTime
  objectives     String[]
  priority       String   @default("medium") // low, medium, high, critical
  description    String?
  budget         Float?
  stakeholders   String[] // array of stakeholder identifiers
  metadata       Json? // flexible metadata storage
  readinessScore Int      @default(0) // 0-100
  createdBy      String
  updatedBy      String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  timeline      Timeline?
  tasks         Task[]
  approvals     Approval[]
  notifications Notification[]
  assets        Asset[]
  team          CampaignTeamMember[]
  schedules     CampaignSchedule[]

  @@map("campaigns")
}

model Timeline {
  id             String   @id @default(uuid())
  campaignId     String   @unique
  template       String // standard, webinar, product_launch, custom
  milestones     Json // array of milestone objects
  criticalPath   String[] // task IDs on critical path
  buffer         Int // buffer time in hours
  estimatedHours Int // total estimated work hours
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  campaign Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@map("timelines")
}

model Task {
  id             String    @id @default(uuid())
  campaignId     String
  title          String
  description    String?
  assigneeId     String?
  dueDate        DateTime
  priority       String    @default("medium") // low, medium, high, critical
  status         String    @default("pending") // pending, assigned, in_progress, blocked, completed
  dependencies   String[] // array of task IDs
  completedAt    DateTime?
  blockedReason  String?
  estimatedHours Int       @default(1)
  actualHours    Int       @default(0)
  tags           String[]
  milestoneId    String? // reference to timeline milestone
  templateTaskId String? // reference to template task that generated this
  createdBy      String
  updatedBy      String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  campaign    Campaign     @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  assignee    TeamMember?  @relation(fields: [assigneeId], references: [id])
  comments    Comment[]
  attachments Attachment[]

  @@index([campaignId, status])
  @@index([assigneeId, dueDate])
  @@index([status, dueDate])
  @@index([milestoneId])
  @@index([templateTaskId])
  @@map("tasks")
}

model TeamMember {
  id            String   @id @default(uuid())
  email         String   @unique
  name          String
  role          String
  skills        String[] // array of skill names
  timezone      String   @default("UTC")
  slackUserId   String?
  availability  Json // weekly schedule object
  maxConcurrent Int      @default(5)
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  tasks                 Task[]
  approvals             Approval[]
  campaigns             CampaignTeamMember[]
  sentNotifications     Notification[]       @relation("NotificationSender")
  receivedNotifications Notification[]       @relation("NotificationRecipient")

  @@map("team_members")
}

model CampaignTeamMember {
  id         String   @id @default(uuid())
  campaignId String
  memberId   String
  role       String // owner, contributor, reviewer, approver
  joinedAt   DateTime @default(now())

  // Relations
  campaign Campaign   @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  member   TeamMember @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@unique([campaignId, memberId])
  @@map("campaign_team_members")
}

model Approval {
  id            String    @id @default(uuid())
  campaignId    String
  stage         String // content, compliance, executive, final
  approverId    String
  status        String    @default("pending") // pending, approved, rejected, changes_requested
  comments      String?
  conditions    String[] // array of approval conditions
  decidedAt     DateTime?
  deadline      DateTime
  autoApprove   Boolean   @default(false)
  autoApproveAt DateTime?
  urgency       String    @default("normal") // low, normal, high, critical
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  campaign Campaign   @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  approver TeamMember @relation(fields: [approverId], references: [id])

  @@unique([campaignId, stage, approverId])
  @@index([status, deadline])
  @@index([autoApprove, autoApproveAt])
  @@map("approvals")
}

model Notification {
  id           String    @id @default(uuid())
  campaignId   String?
  type         String // task_assigned, task_reminder, approval_request, escalation, etc.
  senderId     String?
  recipientId  String
  channel      String // email, slack, in-app, sms
  urgency      String    @default("normal") // low, normal, high, critical
  subject      String?
  message      String
  payload      Json? // additional data for notification
  scheduledFor DateTime  @default(now())
  sentAt       DateTime?
  readAt       DateTime?
  retries      Int       @default(0)
  maxRetries   Int       @default(3)
  error        String?
  createdAt    DateTime  @default(now())

  // Relations
  campaign  Campaign?   @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  sender    TeamMember? @relation("NotificationSender", fields: [senderId], references: [id])
  recipient TeamMember  @relation("NotificationRecipient", fields: [recipientId], references: [id])

  @@index([recipientId, sentAt])
  @@index([scheduledFor, sentAt])
  @@index([channel, sentAt])
  @@map("notifications")
}

model Comment {
  id         String   @id @default(uuid())
  taskId     String
  authorId   String
  content    String
  mentions   String[] // array of user IDs mentioned
  isInternal Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([taskId, createdAt])
  @@map("comments")
}

model Attachment {
  id           String   @id @default(uuid())
  taskId       String
  filename     String
  originalName String
  mimeType     String
  size         Int // file size in bytes
  url          String
  uploadedBy   String
  createdAt    DateTime @default(now())

  // Relations
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([taskId])
  @@map("attachments")
}

model Asset {
  id           String   @id @default(uuid())
  campaignId   String
  name         String
  type         String // image, video, document, template, etc.
  filename     String
  originalName String
  mimeType     String
  size         Int // file size in bytes
  url          String
  metadata     Json? // additional asset metadata
  version      Int      @default(1)
  isActive     Boolean  @default(true)
  uploadedBy   String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  campaign Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@index([campaignId, type])
  @@index([campaignId, isActive])
  @@map("assets")
}

model Schedule {
  id           String    @id @default(uuid())
  campaignId   String?
  title        String
  type         String // campaign_launch, milestone, meeting, deadline
  startDate    DateTime
  endDate      DateTime?
  allDay       Boolean   @default(false)
  recurring    Json? // recurring pattern configuration
  participants String[] // array of team member IDs
  location     String?
  description  String?
  reminders    Json? // array of reminder configurations
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index([startDate, endDate])
  @@index([type, startDate])
  @@map("schedules")
}

model Integration {
  id        String    @id @default(uuid())
  name      String    @unique // slack, mailjet, marketing_agent, etc.
  type      String // mcp_agent, webhook, api
  config    Json // integration configuration
  status    String    @default("active") // active, inactive, error
  lastSync  DateTime?
  error     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("integrations")
}

model ActivityLog {
  id          String   @id @default(uuid())
  type        String // campaign_status_change, task_assigned, etc.
  entityType  String // campaign, task, approval, etc.
  entityId    String
  action      String? // created, updated, deleted, assigned, etc.
  performedBy String // user who performed the action
  actorId     String? // backward compatibility
  details     Json? // action-specific details
  changes     Json? // before/after values
  metadata    Json? // additional context
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())

  @@index([entityType, entityId])
  @@index([performedBy, createdAt])
  @@index([type, createdAt])
  @@index([createdAt])
  @@map("activity_logs")
}

model CampaignSchedule {
  id             String   @id @default(uuid())
  weekNumber     Int // ISO week number
  year           Int
  campaignId     String?
  dayOfWeek      String // monday, tuesday, wednesday, etc.
  scheduledDate  DateTime
  time           String // HH:MM format
  activityType   String // launch, milestone, review, preparation
  name           String
  roundNumber    Int?
  recipientCount Int?
  segment        String?
  details        String?
  status         String   @default("scheduled") // scheduled, in_progress, completed, cancelled
  metadata       Json? // additional activity metadata
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  campaign Campaign? @relation(fields: [campaignId], references: [id])

  @@unique([weekNumber, year, scheduledDate, time])
  @@index([weekNumber, year])
  @@index([scheduledDate])
  @@index([status])
  @@map("campaign_schedules")
}

model DashboardAccess {
  id          String    @id @default(uuid())
  name        String // Team member name
  email       String    @unique
  accessToken String    @unique // Unique login token
  lastAccess  DateTime?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("dashboard_access")
}

model SuppressedContact {
  id String @id @default(uuid())

  // Contact identifiers
  contactId BigInt @unique @map("contact_id") // Mailjet Contact ID
  email     String @unique

  // Suppression details
  suppressionType String    @map("suppression_type") // hard_bounce, soft_bounce, spam_complaint, unsubscribe, manual
  reason          String
  bounceCount     Int       @default(1) @map("bounce_count")
  firstBounceDate DateTime? @map("first_bounce_date")
  lastBounceDate  DateTime? @map("last_bounce_date")

  // Source tracking
  sourceCampaignId String? @map("source_campaign_id")
  sourceBatch      String? @map("source_batch")
  sourceRound      Int?    @map("source_round")

  // Mailjet integration
  mailjetListId    BigInt? @map("mailjet_list_id")
  mailjetBlocked   Boolean @default(false) @map("mailjet_blocked")
  mailjetErrorCode String? @map("mailjet_error_code")

  // Status and lifecycle
  status                 String    @default("active") // active, revalidated, removed
  isPermanent            Boolean   @default(true) @map("is_permanent")
  revalidationEligibleAt DateTime? @map("revalidation_eligible_at")
  revalidatedAt          DateTime? @map("revalidated_at")

  // Audit trail
  suppressedBy String  @default("system") @map("suppressed_by")
  notes        String?
  metadata     Json?

  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([email])
  @@index([contactId])
  @@index([suppressionType])
  @@index([status])
  @@index([sourceBatch])
  @@index([createdAt])
  @@index([revalidationEligibleAt])
  @@index([suppressionType, status])
  @@index([sourceBatch, sourceRound])
  @@map("suppressed_contacts")
}

// ============================================
// CAMPAIGN LIFECYCLE MODELS
// ============================================

/// Campaign Schedule for Lifecycle Management
/// Tracks campaign rounds with automated lifecycle stages
model LifecycleCampaignSchedule {
  id               Int      @id @default(autoincrement())
  campaignName     String
  roundNumber      Int // 1, 2, or 3
  scheduledDate    DateTime
  scheduledTime    String // "09:15"

  // List details
  listName        String
  listId          BigInt // MailJet list ID
  recipientCount  Int
  recipientRange  String // e.g., "1-1177"

  // Campaign details
  mailjetDraftId    BigInt?
  mailjetCampaignId BigInt?
  subject           String
  senderName        String
  senderEmail       String

  // Notification tracking
  notificationStatus Json // { prelaunch: { sent: bool, timestamp, status }, ... }

  // Status
  status CampaignStatus @default(SCHEDULED)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  metrics       LifecycleCampaignMetrics[]
  notifications LifecycleNotificationLog[]

  @@index([scheduledDate, roundNumber])
  @@index([status])
  @@index([mailjetCampaignId])
  @@map("lifecycle_campaign_schedules")
}

/// Campaign Metrics collected from MailJet
model LifecycleCampaignMetrics {
  id                Int      @id @default(autoincrement())
  campaignScheduleId Int
  mailjetCampaignId BigInt

  // Delivery metrics
  processed   Int
  delivered   Int
  bounced     Int
  hardBounces Int
  softBounces Int
  blocked     Int
  queued      Int

  // Engagement metrics
  opened       Int   @default(0)
  clicked      Int   @default(0)
  unsubscribed Int   @default(0)
  complained   Int   @default(0)

  // Calculated rates
  deliveryRate   Float
  bounceRate     Float
  hardBounceRate Float
  softBounceRate Float
  openRate       Float?
  clickRate      Float?

  // Timestamps
  collectedAt DateTime  @default(now())
  sendStartAt DateTime?
  sendEndAt   DateTime?

  // Relations
  campaignSchedule LifecycleCampaignSchedule @relation(fields: [campaignScheduleId], references: [id], onDelete: Cascade)

  @@index([mailjetCampaignId])
  @@index([campaignScheduleId])
  @@map("lifecycle_campaign_metrics")
}

/// Notification log for lifecycle stages
model LifecycleNotificationLog {
  id                 Int      @id @default(autoincrement())
  campaignScheduleId Int
  stage              NotificationStage
  status             NotificationStatus
  attempt            Int       @default(1)
  errorMessage       String?
  slackMessageId     String?
  sentAt             DateTime  @default(now())

  // Relations
  campaignSchedule LifecycleCampaignSchedule @relation(fields: [campaignScheduleId], references: [id], onDelete: Cascade)

  @@index([campaignScheduleId, stage])
  @@index([status])
  @@map("lifecycle_notification_logs")
}

/// Campaign status enum
enum CampaignStatus {
  SCHEDULED
  READY
  LAUNCHING
  SENT
  COMPLETED
  BLOCKED
}

/// Notification stage enum
enum NotificationStage {
  PRELAUNCH
  PREFLIGHT
  LAUNCH_WARNING
  LAUNCH_CONFIRMATION
  WRAPUP
}

/// Notification status enum
enum NotificationStatus {
  SUCCESS
  FAILURE
  RETRYING
}

// ============================================
// LIST MANAGEMENT MODELS
// ============================================

/// Contact List - Represents email lists in MailJet
/// Includes campaign lists, master list, and suppression list
model ContactList {
  id             String   @id @default(uuid())
  name           String
  mailjetListId  BigInt?  @unique @map("mailjet_list_id") // MailJet list ID (null for local-only lists)
  type           ListType
  contactCount   Int      @default(0) @map("contact_count")
  description    String?
  isActive       Boolean  @default(true) @map("is_active")

  // List health metrics (cached)
  lastSyncedAt   DateTime? @map("last_synced_at")
  bounceRate     Float?    @map("bounce_rate")
  deliveryRate   Float?    @map("delivery_rate")
  healthScore    Int?      @map("health_score") // 0-100

  // Metadata
  metadata       Json?

  // Timestamps
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  // Relations
  memberships    ListMembership[]
  healthSnapshots ListHealthSnapshot[]
  maintenanceLogs ListMaintenanceLog[]

  @@index([type])
  @@index([mailjetListId])
  @@index([isActive])
  @@map("contact_lists")
}

/// Contact - Individual email contact
model Contact {
  id               String        @id @default(uuid())
  email            String        @unique
  name             String?
  mailjetContactId BigInt?       @unique @map("mailjet_contact_id")
  status           ContactStatus @default(ACTIVE)

  // Contact properties
  firstName        String?       @map("first_name")
  lastName         String?       @map("last_name")
  properties       Json?         // Additional custom properties

  // Subscription status
  isSubscribed     Boolean       @default(true) @map("is_subscribed")
  unsubscribedAt   DateTime?     @map("unsubscribed_at")

  // Bounce tracking
  bounceCount      Int           @default(0) @map("bounce_count")
  lastBounceDate   DateTime?     @map("last_bounce_date")
  lastBounceType   String?       @map("last_bounce_type") // hard, soft, spam

  // Timestamps
  createdAt        DateTime      @default(now()) @map("created_at")
  updatedAt        DateTime      @updatedAt @map("updated_at")

  // Relations
  memberships      ListMembership[]
  suppressionHistory SuppressionHistoryEntry[]

  @@index([email])
  @@index([status])
  @@index([mailjetContactId])
  @@index([isSubscribed])
  @@map("contacts")
}

/// List Membership - Many-to-many relationship between Contact and ContactList
model ListMembership {
  id        String   @id @default(uuid())
  contactId String   @map("contact_id")
  listId    String   @map("list_id")
  position  Int      // FIFO ordering within list
  isActive  Boolean  @default(true) @map("is_active")

  // Timestamps
  addedAt   DateTime @default(now()) @map("added_at")
  removedAt DateTime? @map("removed_at")

  // Relations
  contact   Contact      @relation(fields: [contactId], references: [id], onDelete: Cascade)
  list      ContactList  @relation(fields: [listId], references: [id], onDelete: Cascade)

  @@unique([contactId, listId])
  @@index([listId, position])
  @@index([contactId])
  @@map("list_memberships")
}

/// Suppression History - Audit trail for contact suppressions
model SuppressionHistoryEntry {
  id            String   @id @default(uuid())
  contactId     String   @map("contact_id")
  reason        String   // hard_bounce, soft_bounce_threshold, spam_complaint, manual, etc.
  suppressedBy  String   @map("suppressed_by") // 'ai' or user identifier
  aiRationale   String?  @map("ai_rationale") // AI's explanation for suppression
  confidence    Float?   // AI confidence score (0-1)

  // Context
  sourceCampaignId String? @map("source_campaign_id")
  metadata         Json?   // Additional context

  // Status
  isActive         Boolean @default(true) @map("is_active")
  reactivatedAt    DateTime? @map("reactivated_at")
  reactivatedBy    String? @map("reactivated_by")

  // Timestamps
  suppressedAt  DateTime @default(now()) @map("suppressed_at")

  // Relations
  contact       Contact  @relation(fields: [contactId], references: [id], onDelete: Cascade)

  @@index([contactId])
  @@index([suppressedBy])
  @@index([suppressedAt])
  @@map("suppression_history")
}

/// List Health Snapshot - Weekly health check records
model ListHealthSnapshot {
  id                  Int      @id @default(autoincrement())
  listId              String   @map("list_id")

  // Metrics
  contactCount        Int      @map("contact_count")
  activeContactCount  Int      @map("active_contact_count")
  bounceRate          Float    @map("bounce_rate")
  hardBounceRate      Float    @map("hard_bounce_rate")
  softBounceRate      Float    @map("soft_bounce_rate")
  deliveryRate        Float    @map("delivery_rate")
  spamRate            Float    @default(0) @map("spam_rate")
  unsubscribeRate     Float    @default(0) @map("unsubscribe_rate")

  // Health assessment
  healthScore         Int      @map("health_score") // 0-100
  healthGrade         String   @map("health_grade") // excellent, good, fair, poor, critical
  aiAssessment        String   @map("ai_assessment") // AI's analysis
  riskFactors         Json     @map("risk_factors") // Array of identified risks
  recommendations     Json     // Array of AI recommendations

  // Trends
  trendDirection      String?  @map("trend_direction") // improving, stable, declining
  previousHealthScore Int?     @map("previous_health_score")

  // Timestamps
  checkedAt           DateTime @default(now()) @map("checked_at")

  // Relations
  list                ContactList @relation(fields: [listId], references: [id], onDelete: Cascade)

  @@index([listId, checkedAt])
  @@map("list_health_snapshots")
}

/// List Maintenance Log - Post-campaign maintenance records
model ListMaintenanceLog {
  id                    Int      @id @default(autoincrement())
  campaignScheduleId    Int?     @map("campaign_schedule_id") // Link to lifecycle campaign
  listId                String   @map("list_id")
  maintenanceType       MaintenanceAction @map("maintenance_type")

  // Actions taken
  contactsSuppressed    Int      @default(0) @map("contacts_suppressed")
  contactsRebalanced    Int      @default(0) @map("contacts_rebalanced")
  contactsAdded         Int      @default(0) @map("contacts_added")
  contactsRemoved       Int      @default(0) @map("contacts_removed")

  // AI analysis
  aiRecommendation      String   @map("ai_recommendation")
  aiConfidence          Float    @map("ai_confidence") // 0-1
  suppressionPlan       Json?    @map("suppression_plan") // Detailed plan
  rebalancingPlan       Json?    @map("rebalancing_plan") // Detailed plan

  // Results
  status                String   @default("completed") // pending, in_progress, completed, failed
  errorMessage          String?  @map("error_message")

  // Timestamps
  executedAt            DateTime @default(now()) @map("executed_at")
  completedAt           DateTime? @map("completed_at")

  // Relations
  list                  ContactList @relation(fields: [listId], references: [id], onDelete: Cascade)

  @@index([campaignScheduleId])
  @@index([listId, executedAt])
  @@index([maintenanceType])
  @@map("list_maintenance_logs")
}

/// List type enum
enum ListType {
  MASTER              // Master user list (source of truth)
  CAMPAIGN_ROUND_1    // Campaign list for Tuesday sends
  CAMPAIGN_ROUND_2    // Campaign list for Thursday sends
  CAMPAIGN_ROUND_3    // Campaign list for next Tuesday sends
  SUPPRESSION         // Contacts to never send to
  CUSTOM              // Custom user-created lists
}

/// Contact status enum
enum ContactStatus {
  ACTIVE              // Active, can receive emails
  BOUNCED_SOFT        // Soft bounce, temporary issue
  BOUNCED_HARD        // Hard bounce, invalid email
  SUPPRESSED          // Suppressed, do not send
  UNSUBSCRIBED        // Unsubscribed from emails
  SPAM_COMPLAINT      // Marked as spam
}

/// Maintenance action enum
enum MaintenanceAction {
  POST_CAMPAIGN_CLEANUP  // After campaign completion
  WEEKLY_HEALTH_CHECK    // Monday health check
  MANUAL_SYNC           // Manual sync trigger
  REBALANCING           // List rebalancing
  SUPPRESSION           // Contact suppression
  IMPORT                // CSV import
}
